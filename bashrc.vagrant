PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting

function __git_ps1_temp {
    local b="$(git symbolic-ref HEAD 2>/dev/null)";
    if [ -n "$b" ]; then
        printf " %s " "${b##refs/heads/}";
    fi
}

function run_cmd() {
  echo "Running $@"
  "$@"
  local error=$?
  if [ $error -ge 1 ]; then
    echo "[error] command exited with status code $error"
    errors=1

    return 1
  else
    return 0
  fi
}

function ttv() {
  dw=http://dw.notonthehighstreet.com/ttv-tracker/
  yesterday=$(date -j -v-1d +"%Y/%m/%d")
  open $dw$yesterday
}

function vssh() {
  ssh vagrant@dev.noths.com "cd /var/sites/notonthehighstreet/current && $*"
}

function ds() {
  echo "You mean dqa."
}

function mds() {
  echo "you mean mdqa."
}

function force_mds() {
  echo "you mean force_mdqa"
}

function db() {
    u=;
    p=;
    h=;
    db=;
    options=;
    if [ $# -eq 0 ]; then
        u="-uroot";
        p="-proot";
        h="-h localhost";
        db="noths_development";
    else
        if [[ $1 =~ qa ]]; then
            u="-unoths";
            p="-pech7bav4viems4i";
            h="-h qa.hq.noths.com";
            db="noths_dump_20130222";
            num="${1/qa/}";
            if [ $((num)) -gt 9 ]; then
                options="-P330$num";
            else
                options="-P3300$num";
            fi;
        else
            if [ $1 == "prod" ]; then
                h="-h mysql-prod";
                db="noths_production";
                options="-A";
            else
                if [ $1 == "investigation" ]; then
                    u="-uroot";
                    p="-proot";
                    h="-h localhost";
                    db="investigation";
                else
                    echo "This is not the database you're looking for....";
                    return 1;
                fi;
            fi;
        fi;
    fi;
    echo "mysql $h $u $p $options $db";
    mysql $h $u $p $options $db
}

function dqa() {
  if [ -z "$1" ]; then
        echo "Please provide a staging environment number.";
        return;
  fi

  if ! [[ "$1" =~ ^[0-9]+$ ]] ; then
        exec >&2; echo "Invalid staging number.";
        return;
  fi

  remote_revision=$(ssh notonthehighstreet@qa$1.hq.noths.com 'cat /var/sites/notonthehighstreet/current/REVISION')
  current_revision=$(git log -1 --pretty=format:'%H')
  current_branch=$(git rev-parse --abbrev-ref HEAD)

  if [ "$remote_revision" == "$current_revision" ]; then
        echo "Latest build already deployed."
  elif [ -z "$2" ]; then
            current_branch=$(git rev-parse --abbrev-ref HEAD)
            echo "Deploying $current_branch"!

            run_cmd ssh vagrant@dev.noths.com "cd /var/sites/notonthehighstreet/current &&
                             bundle exec cap qa$1 deploy branch=$current_branch"
  else
            echo "Deploying $2"!

            run_cmd ssh vagrant@dev.noths.com "cd /var/sites/notonthehighstreet/current &&
                             bundle exec cap qa$1 deploy branch=$2"
  fi
}

function force_dqa() {
  if [ -z "$1" ]; then
        echo "Please provide a staging environment number.";
        return;
  fi

  if ! [[ "$1" =~ ^[0-9]+$ ]] ; then
        exec >&2; echo "Invalid staging number.";
        return;
  fi

  if [ -z "$2" ]; then
            current_branch=$(git rev-parse --abbrev-ref HEAD)
            echo "Deploying $current_branch"!

            run_cmd ssh vagrant@dev.noths.com "cd /var/sites/notonthehighstreet/current &&
                             bundle exec cap qa$1 deploy branch=$current_branch"
  else
            echo "Deploying $2"!

            run_cmd ssh vagrant@dev.noths.com "cd /var/sites/notonthehighstreet/current &&
                             bundle exec cap qa$1 deploy branch=$2"
  fi
}

function mdqa() {
  if [ -z "$1" ]; then
        echo "Please provide a QA environment number.";
        return;
  fi

  if ! [[ "$1" =~ ^[0-9]+$ ]] ; then
        exec >&2; echo "Invalid QA number.";
        return;
  fi

  remote_revision=$(ssh notonthehighstreet@qa$1.hq.noths.com 'cat /var/sites/notonthehighstreet/current/REVISION')
  current_revision=$(git log -1 --pretty=format:'%H')
  current_branch=$(git rev-parse --abbrev-ref HEAD)

  if [ "$remote_revision" == "$current_revision" ]; then
        echo "Latest build already deployed."
  elif [ -z "$2" ]; then
            current_branch=$(git rev-parse --abbrev-ref HEAD)
            echo "Migrating and deploying $current_branch"!

            run_cmd ssh vagrant@dev.noths.com "cd /var/sites/notonthehighstreet/current &&
                           bundle exec cap qa$1 deploy branch=$current_branch migrate=yes"
  else
            echo "Migrating and deploying $2"!

            run_cmd ssh vagrant@dev.noths.com "cd /var/sites/notonthehighstreet/current &&
                           bundle exec cap qa$1 deploy branch=$2 migrate=yes"
  fi
}


function force_mdqa() {
  if [ -z "$1" ]; then
        echo "Please provide a QA environment number.";
        return;
  fi

  if ! [[ "$1" =~ ^[0-9]+$ ]] ; then
        exec >&2; echo "Invalid QA number.";
        return;
  fi

  current_branch=$(git rev-parse --abbrev-ref HEAD)
  if [ -z "$2" ]; then
            current_branch=$(git rev-parse --abbrev-ref HEAD)
            echo "Migrating and deploying $current_branch"!

            run_cmd ssh vagrant@dev.noths.com "cd /var/sites/notonthehighstreet/current &&
                           bundle exec cap qa$1 deploy branch=$current_branch migrate=yes"
  else
            echo "Migrating and deploying $2"!

            run_cmd ssh vagrant@dev.noths.com "cd /var/sites/notonthehighstreet/current &&
                           bundle exec cap qa$1 deploy branch=$2 migrate=yes"
  fi
}


function qa() {
  ssh notonthehighstreet@qa$*.hq.noths.com
}

function log() {
  git log -$*
}

function timer_start {
  timer=${timer:-$SECONDS}
}
function timer_stop {
  timer_show=$(($SECONDS - $timer))
  unset timer
}
trap 'timer_start' DEBUG
PROMPT_COMMAND=timer_stop

export PS1="\[\e[1;30m\]\${timer_show}s\[\e[0m\]\n\[\e[30;42m\]VAGRANT \W \[\e[30;43m\]\$(__git_ps1_temp)\[\e[0m\] "
export CLICOLOR=1
export JENKINS_USERNAME="JENKINS_USERNAME"
export JENKINS_PASSWORD="JENKINS_PASSWORD"
export EDITOR="subl -w"

alias ..='cd ..'
alias bi='bundle install -j4'
alias be='bundle exec'
alias ll='ls -al'
alias gs='git st'
alias gm='git co master'
alias gr='git pull --rebase origin master'
alias gp='git pull'
alias gdbs='git co -- db/schema.rb'
alias noths='cd /var/sites/notonthehighstreet/current/'
alias ttr='touch tmp/restart.txt && echo done.'
alias rs='bundle exec rspec'
alias lc='grunt less:compile'
alias plzsphinx='rm log/searchd.development.pid && bundle exec rake thinking_sphinx:start && echo Sorted.'
alias cacheclasses='touch config/environments/cache_classes && touch tmp/restart.txt && echo Classes cached.'
alias uncacheclasses='rm config/environments/cache_classes && touch tmp/restart.txt && echo Classes uncached.'
alias startsql='/usr/local/mysql/bin/mysqld --datadir=/usr/local/mysql/data'
alias panic="git co as/panicbranch && git add . && git commit -m 'PANIC COMMIT' && git push -fu"
alias assume="git update-index --assume-unchanged"
alias unassume="git update-index --no-assume-unchanged"
alias clean_git_local="git branch --merged | grep -v '\*' | xargs -n 1 git branch -d"
alias clean_git_remote="git remote prune origin"
alias clean_git="clean_git_local && clean_git_remote && git gc"
alias dev_tail="tail -f log/development.log"
alias test_tail="tail -f log/test.log"
alias run_migrations="bundle exec rake db:migrate db:data:migrate db:test:prepare"

assumed="git ls-files -v | grep ^h | cut -c 3-"

noths

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
